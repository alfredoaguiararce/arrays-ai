const { Configuration, OpenAIApi } = require("openai");
const { GetArrayProps } = require('./utils/ObjectParameters');

/* The code is initializing two variables, `configuration` and `openai`, to `null`. These variables
will be used to store the configuration and instance of the OpenAI API respectively, once the API
key is configured using the `ConfigureKey` function. */
let configuration = null;
let openai = null;

/**
 * The function configures an OpenAI API key for use in JavaScript.
 * @param OPEN_AI_KEY - OPEN_AI_KEY is a variable that represents the API key for the OpenAI API. This
 * key is used to authenticate and authorize access to the OpenAI API services.
 */
function ConfigureKey(OPEN_AI_KEY){
    configuration = new Configuration({
        apiKey : OPEN_AI_KEY,
    });
    openai = new OpenAIApi(configuration);
}

/**
This function generates a JavaScript filter for an array of objects, based on a given prompt.
It first calls the GetArrayProps function to get the properties of the objects in the array, which are used in the prompt.
The prompt is then sent to the OpenAI API to generate the JavaScript filter code.
The resulting code is returned as a string.
@param {Array} array - The array of objects to filter.
@param {string} prompt - The prompt for the OpenAI API to generate the filter code.
@returns {string} The JavaScript filter code generated by the OpenAI API.
*/
async function GetQuery(array, prompt) {
    if(openai == null){throw new Error("Please configure key first by calling ConfigureKey()")}
    // Get the properties of the objects in the array.
    const props = GetArrayProps(array);
    // Build the prompt using the array properties and the provided prompt.
    const p = `Generate a JavaScript filter for an array named array of objects with the structure ${JSON.stringify(props)}, to based on the following criteria or respond to the question: ---${prompt}---. should only return the return statetment without the return word.`; 

    // Call the OpenAI API to generate the JavaScript filter code.
    const response = await openai.createCompletion({
        model: "text-davinci-003",
        prompt: p,
        temperature: 0,
        max_tokens: 100,
        n: 1
        });

    // Extract the generated filter code from the response.
    const query = response.data.choices[0].text.trim();
    // Return the generated filter code as a string.
    eval("array = "+ query);

    return array;
}


module.exports = {
    GetQuery,
    ConfigureKey
  };