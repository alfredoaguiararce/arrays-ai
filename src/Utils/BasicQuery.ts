import { Props, GetArrayProps } from './PropsReader';
import { OpenAiConfigurator } from './OpenAiValidator';
import { Configuration, OpenAIApi } from 'openai';


/* These lines of code are initializing two variables, `Configurator` and `openai`, which are used to
configure and access the OpenAI API. */
let Configurator: OpenAiConfigurator;
let openai: OpenAIApi;

/**
 * The function configures an OpenAI API key.
 * @param {string} OpenAIApiKey - OpenAIApiKey is a string parameter that represents the API key for
 * the OpenAI API. This key is used to authenticate and authorize access to the OpenAI API services.
 */
function ConfigureKey(OpenAIApiKey: string) {
    const configuration = new Configuration({
        apiKey: OpenAIApiKey,
      });
    Configurator = new OpenAiConfigurator(configuration);
    openai = Configurator.GetConfiguredOpenAiApi();
}

/**
 * This function generates a TypeScript filter for an array of objects, based on a given prompt.
 * It first calls the `getArrayProps` function to get the properties of the objects in the array,
 * which are used in the prompt. The prompt is then sent to the OpenAI API to generate the
 * TypeScript filter code. The resulting code is returned as a string.
 * @param array - The array of objects to filter.
 * @param Prompt - The prompt for the OpenAI API to generate the filter code.
 * @returns The TypeScript filter code generated by the OpenAI API.
 */
async function GetQuery(array: Array<object>, Prompt: string): Promise<Array<object>> {
    // Check if the OpenAI API object is undefined and throw an error if it is
    if (openai == undefined) throw new Error('Please configure key first by calling ConfigureKey()');

    // Get the properties of the objects in the array
    const props: Props = GetArrayProps(array);

    // Create a prompt for the OpenAI API to generate the filter code
    const PromtConcat = `Generate a TypeScript filter for an array named array of objects with the structure ${JSON.stringify(
        props
    )}, to based on the following criteria or respond to the question: ---${Prompt}---. should only return the return statetment without the return word.`;

    // Send the prompt to the OpenAI API to generate the filter code
    const response = await openai.createCompletion({
        model: 'text-davinci-003',
        prompt: PromtConcat,
        temperature: 0,
        max_tokens: 100,
        n: 1,
    });

    // Get the generated text from the response
    const GeneratedText: string | undefined = response.data.choices[0].text;

    // Check if the generated text is undefined and throw an error if it is
    if (GeneratedText == undefined) throw new Error("There's no response for the prompt");

    // Trim the generated text and evaluate it as JavaScript code to get the filtered array
    const query = GeneratedText.trim();
    eval('array = ' + query);

    // Return the filtered array
    return array;
}

// Export the GetQuery and ConfigureKey functions
export { GetQuery, ConfigureKey };
