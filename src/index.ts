// Import OpenAI and Utils modules
import { Configuration, OpenAIApi } from 'openai';
import { Props, GetArrayProps } from './Utils';

const math = require('mathjs');

// Initialize variables for OpenAI configuration and API
let configuration: Configuration | undefined = undefined;
let openai: OpenAIApi | undefined = undefined;

/**
 * The function configures an OpenAI API key for use in TypeScript.
 * @param apiKey - The API key for the OpenAI API. This key is used to authenticate and authorize
 * access to the OpenAI API services.
 */
function ConfigureKey(apiKey: string): void {
  // Create a new configuration object using the API key
  configuration = new Configuration({
    apiKey: apiKey,
  });

  // Check if the configuration object is undefined and throw an error if it is
  if(configuration == undefined) throw new Error("Please configure with a valid OPEN API KEY");

  // Create a new OpenAI API object using the configuration object
  openai = new OpenAIApi(configuration);
}

/**
 * This function generates a TypeScript filter for an array of objects, based on a given prompt.
 * It first calls the `getArrayProps` function to get the properties of the objects in the array,
 * which are used in the prompt. The prompt is then sent to the OpenAI API to generate the
 * TypeScript filter code. The resulting code is returned as a string.
 * @param array - The array of objects to filter.
 * @param Prompt - The prompt for the OpenAI API to generate the filter code.
 * @returns The TypeScript filter code generated by the OpenAI API.
 */
async function GetQuery(array: Array<object>, Prompt: string): Promise<Array<object>> {
  // Check if the OpenAI API object is undefined and throw an error if it is
  if (openai == undefined) throw new Error('Please configure key first by calling configureKey()');

  // Get the properties of the objects in the array
  const props: Props = GetArrayProps(array);

  // Create a prompt for the OpenAI API to generate the filter code
  const PromtConcat = `Generate a TypeScript filter for an array named array of objects with the structure ${JSON.stringify(props)}, to based on the following criteria or respond to the question: ---${Prompt}---. should only return the return statetment without the return word.`;

  // Send the prompt to the OpenAI API to generate the filter code
  const response = await openai.createCompletion({
    model: 'text-davinci-003',
    prompt: PromtConcat,
    temperature: 0,
    max_tokens: 100,
    n: 1,
  });

  // Get the generated text from the response
  const GeneretedText: String | undefined = response.data.choices[0].text;

  // Check if the generated text is undefined and throw an error if it is
  if(GeneretedText == undefined) throw new Error("There's not response for the prompt");

  // Trim the generated text and evaluate it as JavaScript code to get the filtered array
  const query = GeneretedText.trim();
  console.log("ðŸš€ ~ file: index.ts:63 ~ query:", query)
  eval('array = ' + query);

  // Return the filtered array
  return array;
}

async function test_func(arrays: Array<Array<object>>, Prompt: string): Promise<Object> {
  // Check if the OpenAI API object is undefined and throw an error if it is
  if (openai == undefined) throw new Error('Please configure key first by calling configureKey()');
  // Array to store props for each array
  const propsArray: Array<Props> = [];

  // Iterate over each array in the arrays parameter
  for (const array of arrays) {
   // Get the properties of the objects in the current array
   const props: Props = GetArrayProps(array);
   // Add props to the propsArray
   propsArray.push(props);
  }
  
  console.log("ðŸš€ ~ file: index.ts:84 ~ test_func ~ propsArray:", propsArray)
  // Create a prompt for the OpenAI API to generate the filter code
  const PromtConcat = `Generate TypeScript filters for an array or arrays named 'arrays'. The structure of each individual array is represented by ${JSON.stringify(propsArray)}. Each row represents the properties of each array. Based on the following question or criteria: ---${Prompt}---.Use the index to refer to each individual array with flexibility in their properties. If needed, you can perform operations on the arrays using the 'map()' function. You can join the arrays based on specific properties by specifying the join condition. Manipulate the arrays according to the question and return the filtered result. The generated filter should only include the return statement without the 'return' keyword.`;

  // Send the prompt to the OpenAI API to generate the filter code
  const response = await openai.createCompletion({
    model: 'text-davinci-003',
    prompt: PromtConcat,
    temperature: 0,
    max_tokens: 100,
    n: 1,
  });

  // Get the generated text from the response
  const GeneretedText: String | undefined = response.data.choices[0].text;

  // Check if the generated text is undefined and throw an error if it is
  if(GeneretedText == undefined) throw new Error("There's not response for the prompt");

  // Trim the generated text and evaluate it as JavaScript code to get the filtered array
  const query = GeneretedText.trim();
  console.log("ðŸš€ ~ file: index.ts:63 ~ query:", query)
  eval('arrays ='+ query);
  console.log(arrays)

  // Return the filtered array
  return arrays;
}

// Export the GetQuery and ConfigureKey functions
export { GetQuery, ConfigureKey, test_func };
