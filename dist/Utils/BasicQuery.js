"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigureKey = exports.GetQuery = void 0;
var Utils_1 = require("./Utils");
var OpenAiValidator_1 = require("./OpenAiValidator");
var openai_1 = require("openai");
/* These lines of code are initializing two variables, `Configurator` and `openai`, which are used to
configure and access the OpenAI API. */
var Configurator;
var openai;
/**
 * The function configures an OpenAI API key.
 * @param {string} OpenAIApiKey - OpenAIApiKey is a string parameter that represents the API key for
 * the OpenAI API. This key is used to authenticate and authorize access to the OpenAI API services.
 */
function ConfigureKey(OpenAIApiKey) {
    var configuration = new openai_1.Configuration({
        apiKey: OpenAIApiKey,
    });
    Configurator = new OpenAiValidator_1.OpenAiConfigurator(configuration);
    openai = Configurator.GetConfiguredOpenAiApi();
}
exports.ConfigureKey = ConfigureKey;
/**
 * This function generates a TypeScript filter for an array of objects, based on a given prompt.
 * It first calls the `getArrayProps` function to get the properties of the objects in the array,
 * which are used in the prompt. The prompt is then sent to the OpenAI API to generate the
 * TypeScript filter code. The resulting code is returned as a string.
 * @param array - The array of objects to filter.
 * @param Prompt - The prompt for the OpenAI API to generate the filter code.
 * @returns The TypeScript filter code generated by the OpenAI API.
 */
function GetQuery(array, Prompt) {
    return __awaiter(this, void 0, void 0, function () {
        var props, PromtConcat, response, GeneratedText, query;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // Check if the OpenAI API object is undefined and throw an error if it is
                    if (openai == undefined)
                        throw new Error('Please configure key first by calling ConfigureKey()');
                    props = (0, Utils_1.GetArrayProps)(array);
                    PromtConcat = "Generate a TypeScript filter for an array named array of objects with the structure ".concat(JSON.stringify(props), ", to based on the following criteria or respond to the question: ---").concat(Prompt, "---. should only return the return statetment without the return word.");
                    return [4 /*yield*/, openai.createCompletion({
                            model: 'text-davinci-003',
                            prompt: PromtConcat,
                            temperature: 0,
                            max_tokens: 100,
                            n: 1,
                        })];
                case 1:
                    response = _a.sent();
                    GeneratedText = response.data.choices[0].text;
                    // Check if the generated text is undefined and throw an error if it is
                    if (GeneratedText == undefined)
                        throw new Error("There's no response for the prompt");
                    query = GeneratedText.trim();
                    eval('array = ' + query);
                    // Return the filtered array
                    return [2 /*return*/, array];
            }
        });
    });
}
exports.GetQuery = GetQuery;
